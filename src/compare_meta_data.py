import argparse
import json
import re
from os.path import join


file_regex = re.compile("(^[a-z\-]*)")


results_log = "query_results.json"


def extract_arXiv_topic(filename):
    """Function to extract arXiv topic from filename"""
    return_topic = ""
    matches = file_regex.match(filename).groups()
    if len(matches) > 0:
        return_topic = matches[0]
    return return_topic


def gen_match_results(query_file, directory):
    """Function to parse JSON and log results to command line"""
    match_results = dict()
    with open(query_file) as f:
        json_data = f.read()
    json_file = json.loads(json_data)

    for corpus_name, data in json_file.iteritems():
        match_results[corpus_name] = dict()
        for query, results in data["queries"].iteritems():
            match_results[corpus_name][query] = dict()
            for result in results.itervalues():
                topic = extract_arXiv_topic(result["file"])
                if topic in match_results[corpus_name][query]:
                    match_results[corpus_name][query][topic] += 1
                else:
                    match_results[corpus_name][query][topic] = 1
    json.dump(match_results, open(join(directory, "meta_results.json"), 'w'))
    reduced = reduce_topics(match_results)
    log_data(reduced)


def reduce_topics(match_dict):
    reduced_match = dict()
    for corpus in match_dict:
        reduced_match[corpus] = dict()
        for key in match_dict[corpus]:
            current_topic = extract_arXiv_topic(key)
            if current_topic not in reduced_match[corpus]:
                reduced_match[corpus][current_topic] = dict()
            for topic in match_dict[corpus][key]:
                if topic not in reduced_match[corpus][current_topic]:
                    reduced_match[corpus][current_topic][topic] = 0
                reduced_match[corpus][current_topic][topic] += match_dict[corpus][key][topic]
    return reduced_match


def log_data(reduced):
    """Function to generate a table of the topic matches"""
    topics = ["astro-ph", "cond-mat", "cs", "gr-qc", "hep-ex", "hep-lat", "hep-ph", "hep-th", "math", "math-ph", "nlin", "nucl-ex", "nucl-th", "physics", "quant-ph"]
    for corpus in reduced:
        print corpus
        header = "Input Topic:"
        for topic in topics:
            header += "\t%s" % topic
        print header
        for key in reduced[corpus]:
            line = "%s: & " % key
            for topic in topics:
                if topic in reduced[corpus][key]:
                    count = reduced[corpus][key][topic]
                else:
                    count = 0
                line += "& %s " % count
            print line


def main():
    parser = argparse.ArgumentParser(description='script to compare similarities generated by run sim')
    parser.add_argument('file', help='input json file')
    parser.add_argument('directory', help='output directory for json.')
    args = parser.parse_args()
    gen_match_results(args.file, args.directory)


if __name__ == "__main__":
    main()
